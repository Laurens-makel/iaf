/*
   Copyright 2019, 2020 Integration Partners

   Licensed under the Apache License, Version 2.0 (the "License");
   you may not use this file except in compliance with the License.
   You may obtain a copy of the License at

       http://www.apache.org/licenses/LICENSE-2.0

   Unless required by applicable law or agreed to in writing, software
   distributed under the License is distributed on an "AS IS" BASIS,
   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
   See the License for the specific language governing permissions and
   limitations under the License.
*/
package nl.nn.adapterframework.extensions.aspose.pipe;

import java.io.ByteArrayInputStream;
import java.io.File;
import java.io.IOException;
import java.io.InputStream;
import java.io.UnsupportedEncodingException;
import java.nio.file.Files;
import java.nio.file.Paths;
import java.util.Arrays;
import java.util.List;

import org.apache.commons.lang3.StringUtils;

import nl.nn.adapterframework.configuration.ConfigurationException;
import nl.nn.adapterframework.configuration.ConfigurationWarnings;
import nl.nn.adapterframework.core.IPipeLineSession;
import nl.nn.adapterframework.core.PipeRunException;
import nl.nn.adapterframework.core.PipeRunResult;
import nl.nn.adapterframework.core.PipeStartException;
import nl.nn.adapterframework.doc.IbisDoc;
import nl.nn.adapterframework.pipes.FixedForwardPipe;
import nl.nn.adapterframework.stream.Message;
import nl.nn.adapterframework.util.ClassUtils;
import nl.nn.adapterframework.util.XmlBuilder;

import com.aspose.ocr.OcrEngine;

/**
 * Extracts text from images 
 * @author M63H114
 */
public class OcrPipe extends FixedForwardPipe {
    private String license = null;
    
    // image to perform OCR on
    private String imagePath = null;
    private String imagePathSessionKey = null;

    private OcrEngine ocr;

	@Override
	public void configure() throws ConfigurationException {
        super.configure();

        if(getImagePath() == null && getImagePathSessionKey() == null){
			throw new ConfigurationException("imagePath or imagePathSessionKey must be set.", e);
        }
        
	    // TODO: could be used without a license with a evaluation watermark on the converted file
		// License check
		if (StringUtils.isEmpty(license)) {
			ConfigurationWarnings.add(this, log, "Aspose License is not configured. There will be evaluation watermarks on the converted documents. There are also some restrictions in the API use. License field could be set with a valid information to avoid this. ");
		}else {
			if(ClassUtils.getResourceURL(this, license) == null) {
				throw new ConfigurationException("Specified file for aspose license is not found");
			}
		}
		// load license 
		try {
			loader = new AsposeLicenseLoader(license, fontsDirectory);
			loader.loadLicense();
		} catch (Exception e) {
			throw new ConfigurationException("Error occured while loading the license", e);
		}
        
        // Create an instance of OcrEngine
        ocr = new OcrEngine();
	}

	@Override
	public void start() throws PipeStartException {
		super.start();
	}

	@Override
	public void stop() {
		super.stop();
	}

	@Override
	public PipeRunResult doPipe(Message input, IPipeLineSession session) throws PipeRunException {
        String imagePathToUse = null;
        String result = null; 

        if(getImagePath() == null){
            imagePathToUse = (String) session.get(getImagePathSessionKey());
        }
        else {
            imagePathToUse = getImagePath();
        }

        // Set the Image property
        ocr.setImage(ImageStream.fromFile(imagePathToUse));

        // Perform OCR and get extracted text
        try {
            if (ocr.process()) {
                result = ocr.getText();
            }
        } catch (Exception e) {
            e.printStackTrace();
        }

        return new PipeRunResult(getForward(), result);
	}

	public String getLicense() {
		return license;
	}

	@IbisDoc({ "aspose license location including the file name. It can also be used without license but there some restrictions on usage. If license is in resource, license attribute can be license file name. If the license is in somewhere in filesystem then it should be full path to file including filename and starting with file://// prefix. classloader.allowed.protocols property should contain 'file' protocol", "" })
	public void setLicense(String license) {
		this.license = license;
    }
    
    public String getImagePath() {
		return imagePath;
	}

	// @IbisDoc({ "aspose license location including the file name. It can also be used without license but there some restrictions on usage. If license is in resource, license attribute can be license file name. If the license is in somewhere in filesystem then it should be full path to file including filename and starting with file://// prefix. classloader.allowed.protocols property should contain 'file' protocol", "" })
	public void setImagePath(String imagePath) {
		this.imagePath = imagePath;
    }
 
    public String getImagePathSessionKey() {
		return imagePathSessionKey;
	}

	// @IbisDoc({ "aspose license location including the file name. It can also be used without license but there some restrictions on usage. If license is in resource, license attribute can be license file name. If the license is in somewhere in filesystem then it should be full path to file including filename and starting with file://// prefix. classloader.allowed.protocols property should contain 'file' protocol", "" })
	public void setImagePathSessionKey(String imagePathSessionKey) {
		this.imagePathSessionKey = imagePathSessionKey;
	}
}
